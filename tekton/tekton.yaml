apiVersion: v1
kind: Namespace
metadata:
  name: tekton
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: display-body
spec:
  params:
    - name: body
      type: string
  steps:
    - name: display-body
      image: almalinux/8-base:8.6
      script: |
        body='$(params.body)'
        dnf install -y jq
        echo "${body}"
        echo "${body}" | jq
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: reporting
spec:
  params:
    - name: repo-url
      type: string
    - name: event-key
      type: string
    - name: request-id
      type: string
    - name: committer-name
      type: string
    - name: pullrequest-id
      type: string
    - name: pullrequest-author
      type: string
    - name: pullrequest-nickname
      type: string
    - name: pullrequest-url
      type: string
    - name: pullrequest-api-comments
      type: string
    - name: pipeline-status
      type: string
    - name: pipeline-run-name
      type: string
    - name: bitbucket-creds-secret-name
      type: string
  workspaces:
    - name: source
  steps:
    - name: report
      image: almalinux/8-base:8.6
      env:
        - name: BITBUCKET_USERNAME
          valueFrom:
            secretKeyRef:
              name: $(params.bitbucket-creds-secret-name)
              key: bitbucket-username
        - name: BITBUCKET_APPPASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.bitbucket-creds-secret-name)
              key: bitbucket-apppassword
      script: |
        set -euxo pipefail
        printf "repo-url: $(params.repo-url)
        event-key: $(params.event-key)
        request-id: $(params.request-id)
        committer-name: $(params.committer-name)
        pullrequest-id: $(params.pullrequest-id)
        pullrequest-author: $(params.pullrequest-author)
        pullrequest-nickname: $(params.pullrequest-nickname)
        pullrequest-url: $(params.pullrequest-url)
        pullrequest-api-comments: $(params.pullrequest-api-comments)
        "
        printf "PipelineRun Name: $(params.pipeline-run-name)\n"
        printf "Pipeline Status: $(params.pipeline-status)\n"
        if [[ -z $(params.pullrequest-id) ]]; then
          printf "This run was not spawned via a Pull Request.  Not sending update to BitBucket\n."
          exit 0
        fi
        if
          Failed) status="FAILED!!!!!  Please review" ;;
          Succeeded) status="succeeded" ;;
          Completed) status="completed" ;;
        esac
        read -r -d '' CONTENT <<'EOL' || true
        {
          "content": {
            "raw": "PipelineRun $(params.pipeline-run-name) has ${status}."
          }
        }
        EOL
        http_code=$(curl \
          --silent \
          --fail \
          --output /dev/stderr \
          --write-out "%{http_code}" \
          -X POST \
          -u "${BITBUCKET_USERNAME}:${BITBUCKET_APPPASSWORD}" \
          -H "Content-Type: application/json" \
          '$(params.pullrequest-api-comments)' \
          -d "${CONTENT}")
        if [[ $http_code -lt 200 ]] || [[ $http_code -ge 300 ]]; then
          printf "Command to update bitbucket failed with http_code: ${http_code}."
          exit 1
        fi
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: rpm-build
spec:
  # resources:
  # outputs:
  # https://stackoverflow.com/questions/69617680/output-types-for-tekton-task
  # The docs do not mention the types; this SO literally pulled it from the src
  # - name: builtRpm
  #   type: storage
  # - name: builtSourceRpm
  #   type: storage
  workspaces:
    - name: source
  steps:
    - name: build
      image: almalinux/8-base:8.6
      script: |
        set -x on
        set -v on
        dnf install -y rpmdevtools rpmlint
        ls -lR $(workspaces.source.path)
        exit 0
        cd $(workspaces.source.path)/rpmbuild
        tar czvf SOURCES/test-0.0.1.tar.gz test-0.0.1/
        rpmlint SPECS/test.spec
        rpmbuild -bs --define "_topdir $PWD" --build-in-place SPECS/test.spec
        rpmbuild -bb --define "_topdir $PWD" --build-in-place SPECS/test.spec
        mkdir -p $(workspaces.source.path)/rpms
        cp $(workspaces.source.path)/rpmbuild/RPMS/noarch/*.rpm $(workspaces.source.path)/rpmbuild/SRPMS/*.rpm $(workspaces.source.path)/rpms
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: create-rpm
spec:
  description: |
    This pipeline clones a git repo, then creates an rpm
  params:
    - name: body
      type: string
    - name: repo-url
      type: string
      description: The git repo URL to clone from.
    - name: event-key
      type: string
      description: BitBucket Event Key
    - name: request-id
      type: string
      description: BitBucket Webhook Id
    - name: committer-name
      type: string
      description: Name of the person who committed this change
    - name: pullrequest-id
      type: string
      description: Pull Request Id
      default: ""
    - name: pullrequest-author
      type: string
      description: Author of the Pull Request
      default: ""
    - name: pullrequest-nickname
      type: string
      description: Nick name of the Pull Request author
      default: ""
    - name: pullrequest-url
      type: string
      description: BitBucket Pull Request URL
      default: ""
    - name: pullrequest-api-comments
      type: string
      description: BitBucket API for Pull Request Comments
      default: ""
  workspaces:
    - name: ssh-creds
      description: SSH Keys
    - name: shared-data
      description: |
        This workspace contains the cloned repo files, so they can be read by the
        next task.
  tasks:
    - name: get-body
      taskRef:
        name: display-body
      params:
        - name: body
          value: $(params.body)
    - name: fetch-source
      taskRef:
        name: git-clone
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
        - name: output
          workspace: shared-data
      params:
        - name: url
          value: $(params.repo-url)
    - name: rpm-build
      runAfter:
        - fetch-source
      taskRef:
        name: rpm-build
      workspaces:
        - name: source
          workspace: shared-data
  finally:
    - name: results
      workspaces:
        - name: source
          workspace: shared-data
      taskRef:
        name: reporting
      params:
        - name: bitbucket-creds-secret-name
          value: bitbucket-creds
        - name: pipeline-status
          value: $(tasks.status)
        - name: pipeline-run-name
          value: $(context.pipelineRun.name)
        - name: repo-url
          value: $(params.repo-url)
        - name: event-key
          value: $(params.event-key)
        - name: request-id
          value: $(params.request-id)
        - name: committer-name
          value: $(params.committer-name)
        - name: pullrequest-id
          value: $(params.pullrequest-id)
        - name: pullrequest-author
          value: $(params.pullrequest-author)
        - name: pullrequest-nickname
          value: $(params.pullrequest-nickname)
        - name: pullrequest-url
          value: $(params.pullrequest-url)
        - name: pullrequest-api-comments
          value: $(params.pullrequest-api-comments)
